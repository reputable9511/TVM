<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TVM Calculator</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    label { display: block; margin-top: 10px; }
    input, select { width: 100%; padding: 8px; margin-top: 5px; }
    #chart-container { margin-top: 20px; }
  </style>
</head>
<body>
  <h1>Time Value of Money Calculator</h1>
  <form id="tvm-form">
    <label for="pv">Present Value (PV):</label>
    <input type="number" id="pv" step="0.01" required>

    <label for="rate">Interest Rate (Rate) (% per period):</label>
    <input type="number" id="rate" step="0.01" required>

    <label for="periods">Number of Periods (n):</label>
    <input type="number" id="periods" required>

    <label for="pmt">Payment (PMT):</label>
    <input type="number" id="pmt" step="0.01" required>

    <label for="timing">Payment Timing:</label>
    <select id="timing">
      <option value="end">End of Period</option>
      <option value="beginning">Beginning of Period</option>
    </select>

    <button type="button" id="calculate">Calculate</button>
  </form>

  <h2>Future Value (FV): <span id="fv-result"></span></h2>

  <div id="chart-container">
    <canvas id="fv-chart"></canvas>
  </div>

  <script>
    document.getElementById('calculate').addEventListener('click', function() {
      const pv = parseFloat(document.getElementById('pv').value) || 0;
      const rate = parseFloat(document.getElementById('rate').value) / 100 || 0;
      const periods = parseInt(document.getElementById('periods').value) || 0;
      const pmt = parseFloat(document.getElementById('pmt').value) || 0;
      const timing = document.getElementById('timing').value;

      let fv = pv * Math.pow(1 + rate, periods);
      const paymentFactor = (Math.pow(1 + rate, periods) - 1) / rate;
      fv += pmt * paymentFactor * (timing === 'beginning' ? (1 + rate) : 1);

      document.getElementById('fv-result').innerText = fv.toFixed(2);

      // Update chart
      const fvData = [];
      for (let i = 0; i <= periods; i++) {
        let tempFV = pv * Math.pow(1 + rate, i);
        tempFV += pmt * ((Math.pow(1 + rate, i) - 1) / rate) * (timing === 'beginning' ? (1 + rate) : 1);
        fvData.push(tempFV);
      }

      const ctx = document.getElementById('fv-chart').getContext('2d');
      new Chart(ctx, {
        type: 'line',
        data: {
          labels: Array.from({ length: periods + 1 }, (_, i) => i),
          datasets: [{
            label: 'Future Value',
            data: fvData,
            borderColor: 'blue',
            fill: false,
          }],
        },
        options: {
          responsive: true,
          scales: {
            x: { title: { display: true, text: 'Periods' } },
            y: { title: { display: true, text: 'Future Value' } },
          },
        },
      });
    });
  </script>
</body>
</html>
